name: Tests and code quality

on: [push, pull_request]

jobs:
  push_job:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest

    steps:
    - name: Setup
      uses: nilskre/biocypher/.github/workflows/reusable_steps/setup.yaml@PyOpenSci_review_part_2 #TODO: adapt Org
    #----------------------------------------------
    #       load cached venv if cache exists
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    #----------------------------------------------
    # install dependencies if cache does not exist
    #----------------------------------------------
    - name: Install Dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install
    #----------------------------------------------
    #    setup docker containers for testing
    #----------------------------------------------
    - name: Start Neo4j Docker
      run: docker run --restart always --publish=7474:7474 --publish=7687:7687 --env NEO4J_AUTH=neo4j/your_password_here --env NEO4J_PLUGINS='["apoc"]' --env=NEO4J_ACCEPT_LICENSE_AGREEMENT=yes -d neo4j:4.4-enterprise
    - name: Start Postgres Docker
      run: docker run --restart always --publish=5432:5432 --env POSTGRES_PASSWORD=postgres -d postgres:11.21-bullseye
    #----------------------------------------------
    #     run tests and code quality checks
    #----------------------------------------------
    - name: Run Tests
      run: poetry run pytest --password=your_password_here
    - name: Check code quality
      uses: pre-commit/action@v3.0.0

  pull_request_job:
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.9", "3.10", "3.11"]
    runs-on: ${{ matrix.os }}
    env:
      POETRY_VERSION: 1.5.1
    defaults:
      run:
        shell: bash

    steps:
    #----------------------------------------------
    # check-out repo and set-up python and poetry
    #----------------------------------------------
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v3
      with:
        path: ~/.local
        key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}
    - name: Install and configure Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        version: ${{env.POETRY_VERSION}}
        virtualenvs-create: true
        virtualenvs-in-project: true
    #----------------------------------------------
    #       load cached venv if cache exists
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    #----------------------------------------------
    # install dependencies if cache does not exist
    #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Install library
      run: poetry install --no-interaction
    #----------------------------------------------
    #    setup docker containers for testing
    #----------------------------------------------
    # currently only available for ubuntu and macos
    - name: Install Docker
      uses: douglascamata/setup-docker-macos-action@v1-alpha
      if: ${{ matrix.os == 'macos-latest' }}
    - name: Start Neo4j Docker
      run: docker run --restart always --publish=7474:7474 --publish=7687:7687 --env NEO4J_AUTH=neo4j/your_password_here --env NEO4J_PLUGINS='["apoc"]' --env=NEO4J_ACCEPT_LICENSE_AGREEMENT=yes -d neo4j:4.4-enterprise
      if: ${{ matrix.os != 'windows-latest' }}
    - name: Start Postgres Docker
      run: docker run --restart always --publish=5432:5432 --env POSTGRES_PASSWORD=postgres -d postgres:11.21-bullseye
      if: ${{ matrix.os != 'windows-latest' }}
    #----------------------------------------------
    #      run tests and code quality checks
    #----------------------------------------------
    - name: Run Tests
      run: |
        source $VENV
        pytest --password=your_password_here
    - name: Check code quality
      uses: pre-commit/action@v3.0.0
    - name: Generate coverage report
      run: poetry run coverage run -m pytest --password=your_password_here
      if: ${{ matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest' }}
    - name: Generate coverage badge
      run: poetry run coverage-badge -f -o docs/coverage/coverage.svg
      # TODO: set to pyopensci branch to test it -> set it back to main branch after test
      if: ${{ matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/pyopensci' }} # main
    - name: Commit changes
      uses: s0/git-publish-subdir-action@develop
      if: ${{ matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/pyopensci' }} # main
      env:
        REPO: self
        BRANCH: coverage
        FOLDER: docs/coverage
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
